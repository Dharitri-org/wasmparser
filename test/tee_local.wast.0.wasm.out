(module
  (type $type0 (func (result i32)))
  (type $type1 (func (result i64)))
  (type $type2 (func (result f32)))
  (type $type3 (func (result f64)))
  (type $type4 (func (param i32) (result i32)))
  (type $type5 (func (param i64) (result i64)))
  (type $type6 (func (param f32) (result f32)))
  (type $type7 (func (param f64) (result f64)))
  (type $type8 (func (param i64 f32 f64 i32 i32)))
  (type $type9 (func (param i64 f32 f64 i32 i32) (result i64)))
  (type $type10 (func (param i64 f32 f64 i32 i32) (result f64)))
  (export "type-local-i32" (func $func0))
  (export "type-local-i64" (func $func1))
  (export "type-local-f32" (func $func2))
  (export "type-local-f64" (func $func3))
  (export "type-param-i32" (func $func4))
  (export "type-param-i64" (func $func5))
  (export "type-param-f32" (func $func6))
  (export "type-param-f64" (func $func7))
  (export "type-mixed" (func $func8))
  (export "write" (func $func9))
  (export "result" (func $func10))
  (func $func0 (result i32)
    (local $var0 i32)
    i32.const 0
    tee_local $var0
  )
  (func $func1 (result i64)
    (local $var0 i64)
    i64.const 0
    tee_local $var0
  )
  (func $func2 (result f32)
    (local $var0 f32)
    f32.const 0.0
    tee_local $var0
  )
  (func $func3 (result f64)
    (local $var0 f64)
    f64.const 0.0
    tee_local $var0
  )
  (func $func4 (param $var0 i32) (result i32)
    i32.const 10
    tee_local $var0
  )
  (func $func5 (param $var0 i64) (result i64)
    i64.const 11
    tee_local $var0
  )
  (func $func6 (param $var0 f32) (result f32)
    f32.const 0x1.633334p3
    tee_local $var0
  )
  (func $func7 (param $var0 f64) (result f64)
    f64.const 0x1.8666666666666p3
    tee_local $var0
  )
  (func $func8 (param $var0 i64) (param $var1 f32) (param $var2 f64) (param $var3 i32) (param $var4 i32)
    (local $var5 f32) (local $var6 i64) (local $var7 i64) (local $var8 f64)
    i64.const 0
    tee_local $var0
    i64.eqz
    drop
    f32.const 0.0
    tee_local $var1
    f32.neg
    drop
    f64.const 0.0
    tee_local $var2
    f64.neg
    drop
    i32.const 0
    tee_local $var3
    i32.eqz
    drop
    i32.const 0
    tee_local $var4
    i32.eqz
    drop
    f32.const 0.0
    tee_local $var5
    f32.neg
    drop
    i64.const 0
    tee_local $var6
    i64.eqz
    drop
    i64.const 0
    tee_local $var7
    i64.eqz
    drop
    f64.const 0.0
    tee_local $var8
    f64.neg
    drop
  )
  (func $func9 (param $var0 i64) (param $var1 f32) (param $var2 f64) (param $var3 i32) (param $var4 i32) (result i64)
    (local $var5 f32) (local $var6 i64) (local $var7 i64) (local $var8 f64)
    f32.const -0x1.333334p-2
    tee_local $var1
    drop
    i32.const 40
    tee_local $var3
    drop
    i32.const -7
    tee_local $var4
    drop
    f32.const 0x1.600000p2
    tee_local $var5
    drop
    i64.const 6
    tee_local $var6
    drop
    f64.const 0x1.0000000000000p3
    tee_local $var8
    drop
    get_local $var0
    f64.convert_u/i64
    get_local $var1
    f64.promote/f32
    get_local $var2
    get_local $var3
    f64.convert_u/i32
    get_local $var4
    f64.convert_s/i32
    get_local $var5
    f64.promote/f32
    get_local $var6
    f64.convert_u/i64
    get_local $var7
    f64.convert_u/i64
    get_local $var8
    f64.add
    f64.add
    f64.add
    f64.add
    f64.add
    f64.add
    f64.add
    f64.add
    i64.trunc_s/f64
  )
  (func $func10 (param $var0 i64) (param $var1 f32) (param $var2 f64) (param $var3 i32) (param $var4 i32) (result f64)
    (local $var5 f32) (local $var6 i64) (local $var7 i64) (local $var8 f64)
    i64.const 1
    tee_local $var0
    f64.convert_u/i64
    f32.const 0x1.000000p1
    tee_local $var1
    f64.promote/f32
    f64.const 0x1.a666666666666p1
    tee_local $var2
    i32.const 4
    tee_local $var3
    f64.convert_u/i32
    i32.const 5
    tee_local $var4
    f64.convert_s/i32
    f32.const 0x1.600000p2
    tee_local $var5
    f64.promote/f32
    i64.const 6
    tee_local $var6
    f64.convert_u/i64
    i64.const 0
    tee_local $var7
    f64.convert_u/i64
    f64.const 0x1.0000000000000p3
    tee_local $var8
    f64.add
    f64.add
    f64.add
    f64.add
    f64.add
    f64.add
    f64.add
    f64.add
  )
)
